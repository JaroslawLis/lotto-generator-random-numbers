{"version":3,"sources":["components/Header.js","components/NavBar.js","components/OneTicket.js","components/Tickets.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","budget","lotteryTicket","react_default","a","createElement","NavBar","click","className","onClick","OneTicket","coupon","numbers","Object","toConsumableArray","length","arr","_loop","i","match","find","el","div","key","push","Tickets","coupons","table","map","number","components_OneTicket","settings","price","total","App","state","tableOfResult","handleDrawingButton","amountOfCoupons","Math","floor","z","_this","drawing","setState","result","oneDraw","random","Fragment","src_components_Header","src_components_NavBar","this","components_Tickets","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAiBeA,eAdA,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,OAA4BD,EAApBE,cACxB,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCACqBF,EAAAC,EAAAC,cAAA,kBAAUJ,EAAV,KADrB,oBCGOK,SARA,SAAAN,GAAe,IAAZO,EAAYP,EAAZO,MAChB,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,UAAQI,QAASF,GAAjB,wBCmBSG,EAxBG,SAAAV,GAAgB,IAAbW,EAAaX,EAAbW,OACbC,EAAOC,OAAAC,EAAA,EAAAD,CAAOF,GAEpB,GAAIC,EAAQG,OAAQ,CAElB,IADA,IAAIC,EAAM,GADQC,EAAA,SAETC,GACP,IAAIC,EAAQP,EAAQQ,KAAK,SAAAC,GAAE,OAAIA,IAAOH,IAClCI,EACFJ,IAAMC,EACJhB,EAAAC,EAAAC,cAAA,OAAKkB,IAAKL,EAAGV,UAAU,eACpBU,GAGHf,EAAAC,EAAAC,cAAA,OAAKkB,IAAKL,GAAV,IAAeA,EAAf,KAEJF,EAAIQ,KAAKF,IAVFJ,EAAI,EAAGA,EAAI,GAAIA,IAAKD,EAApBC,GAaT,OAAOf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cAAf,IAA8BQ,EAA9B,KAEP,OAAO,MCJIS,EAdC,SAAAzB,GAAiB,IAAd0B,EAAc1B,EAAd0B,QACXd,EAAOC,OAAAC,EAAA,EAAAD,CAAOa,GAEpB,GAAId,EAAQG,OAAQ,CAClB,IAAIY,EAAQf,EAAQgB,IAAI,SAACC,EAAQX,GAAT,OACtBf,EAAAC,EAAAC,cAACyB,EAAD,CAAWP,IAAKL,EAAGP,OAAQkB,MAG7B,OAAO1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cAAf,IAA8BmB,EAA9B,KAEP,OAAO,MCRLI,EAAW,CACfC,MAAO,KACPC,MAAO,IA+CMC,6MA3CbC,MAAQ,CACNC,cAAe,MAGjBC,oBAAsB,WAGpB,IAFA,IAAIC,EAAkBC,KAAKC,MAAMT,EAASE,MAAQF,EAASC,OACvDI,EAAgB,GACXlB,EAAI,EAAGA,EAAIoB,EAAiBpB,IAAK,CACxC,IAAIuB,EAAIC,EAAKC,UACbP,EAAcZ,KAAKiB,GAErBC,EAAKE,SAAS,CACZR,qBAIJO,QAAU,WACR,IAAIE,EAAS,GAKb,IANc,IAAA5B,EAAA,WAOZ,IAAI6B,EAHGP,KAAKC,MAAsB,GAAhBD,KAAKQ,SAAgB,GAInCD,IAAYD,EAAOzB,KAAK,SAAAC,GAAE,OAAIA,IAAOyB,KACvCD,EAAOrB,KAAKsB,IAHTD,EAAO9B,OAAS,GAAGE,IAM1B,OAAO4B,2EAIP,OACE1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4C,SAAA,KACE7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAQhD,OAAQ8B,EAASE,MAAO/B,cAAe6B,EAASC,QACxD7B,EAAAC,EAAAC,cAAC6C,EAAD,CAAQ3C,MAAO4C,KAAKd,sBAEpBlC,EAAAC,EAAAC,cAAC+C,EAAD,CAAS1B,QAASyB,KAAKhB,MAAMC,wBAtCnBiB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStC,MACvB,2DCZNuC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee618626.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ budget, lotteryTicket }) => {\r\n  return (\r\n    <header>\r\n      <h4> Generator Lotto </h4>\r\n      <div>\r\n        <p>\r\n          Twój budżet wynosi:<strong> {budget} </strong>\r\n          złotych\r\n        </p>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = ({ click }) => {\r\n  return (\r\n    <nav className=\"navigation\">\r\n      <button onClick={click}>Losowanie </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nconst OneTicket = ({ coupon }) => {\r\n  const numbers = [...coupon];\r\n\r\n  if (numbers.length) {\r\n    let arr = [];\r\n    for (let i = 1; i < 50; i++) {\r\n      let match = numbers.find(el => el === i);\r\n      let div =\r\n        i === match ? (\r\n          <div key={i} className=\"full_number\">\r\n            {i}\r\n          </div>\r\n        ) : (\r\n          <div key={i}> {i} </div>\r\n        );\r\n      arr.push(div);\r\n    }\r\n\r\n    return <div className=\"one_ticket\"> {arr} </div>;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default OneTicket;\r\n","import React from \"react\";\r\nimport OneTicket from \"./OneTicket\";\r\n\r\nconst Tickets = ({ coupons }) => {\r\n  const numbers = [...coupons];\r\n\r\n  if (numbers.length) {\r\n    let table = numbers.map((number, i) => (\r\n      <OneTicket key={i} coupon={number} />\r\n    ));\r\n\r\n    return <div className=\"main_table\"> {table} </div>;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Tickets;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport NavBar from \"./components/NavBar\";\nimport Tickets from \"./components/Tickets\";\nconst settings = {\n  price: 1.25,\n  total: 10\n};\n\nclass App extends Component {\n  state = {\n    tableOfResult: []\n  };\n\n  handleDrawingButton = () => {\n    let amountOfCoupons = Math.floor(settings.total / settings.price);\n    let tableOfResult = [];\n    for (let i = 0; i < amountOfCoupons; i++) {\n      let z = this.drawing();\n      tableOfResult.push(z);\n    }\n    this.setState({\n      tableOfResult\n    });\n  };\n\n  drawing = () => {\n    let result = [];\n\n    function wynikLosowania() {\n      return Math.floor(Math.random() * 42 + 1);\n    }\n    while (result.length < 5) {\n      let oneDraw = wynikLosowania();\n      if (oneDraw !== result.find(el => el === oneDraw)) {\n        result.push(oneDraw);\n      }\n    }\n    return result;\n  };\n\n  render() {\n    return (\n      <>\n        <Header budget={settings.total} lotteryTicket={settings.price} />\n        <NavBar click={this.handleDrawingButton} />\n\n        <Tickets coupons={this.state.tableOfResult} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}