{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","settings","price","total","Header","react_default","a","createElement","Budget","Zaklad","props","console","log","liczby","Object","toConsumableArray","zaklad","length","arr","_loop","i","match","find","el","div","key","className","push","Zaklady","zaklady","table","map","liczba","App_Zaklad","App","state","tableOfResult","handleDrawingButton","iloscZakladow","Math","floor","z","_this2","drawing","setState","result","_loop2","oneDraw","random","Fragment","App_Header","App_Budget","onClick","this","App_Zaklady","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCIlCC,eAAW,CACfC,MAAO,KACPC,MAAO,KAGHC,EAAS,kBAAMC,EAAAC,EAAAC,cAAA,gCACfC,EAAS,kBACbH,EAAAC,EAAAC,cAAA,WACG,IADH,+BAEuBN,EAASE,MAFhC,eAGU,MAMNM,EAAS,SAAAC,GACbC,QAAQC,IAAIF,GACZ,IAAMG,EAAMC,OAAAC,EAAA,EAAAD,CAAOJ,EAAMM,QAGzB,GAFAL,QAAQC,IAAIC,GAERA,EAAOI,OAAQ,CAEjB,IADA,IAAIC,EAAM,GADOC,EAAA,SAERC,GACP,IAAIC,EAAQR,EAAOS,KAAK,SAAAC,GAAE,OAAIA,IAAOH,IACjCI,EACFJ,IAAMC,EACJhB,EAAAC,EAAAC,cAAA,OAAKkB,IAAKL,EAAGM,UAAU,eACpBN,GAGHf,EAAAC,EAAAC,cAAA,OAAKkB,IAAKL,GAAIA,GAElBF,EAAIS,KAAKH,IAVFJ,EAAI,EAAGA,EAAI,GAAIA,IAAKD,EAApBC,GAaT,OAAOf,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,qBAAqBR,GAE3C,OAAO,MAILU,EAAU,SAAAlB,GACd,IAAMG,EAAMC,OAAAC,EAAA,EAAAD,CAAOJ,EAAMmB,SAEzB,GADAlB,QAAQC,IAAIC,EAAOI,QACfJ,EAAOI,OAAQ,CACjB,IAAIa,EAAQjB,EAAOkB,IAAI,SAAAC,GAAM,OAAI3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAQjB,OAAQgB,MAEjD,OADArB,QAAQC,IAAIkB,GACLzB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cAAcI,GAEpC,OAAO,MA+CII,6MA1CbC,MAAQ,CACNC,cAAe,MAEjBC,oBAAsB,WAGpB,IAFA,IAAIC,EAAgBC,KAAKC,MAAMvC,EAASE,MAAQF,EAASC,OACrDkC,EAAgB,GACXhB,EAAI,EAAGA,EAAIkB,EAAelB,IAAK,CACtC,IAAIqB,EAAIC,EAAKC,UACbP,EAAcT,KAAKc,GAErBC,EAAKE,SAAS,CACZR,qBAIJO,QAAU,WACR,IAAIE,EAAS,GAKb,IANc,IAAAC,EAAA,WAOZ,IAAIC,EAHGR,KAAKC,MAAsB,GAAhBD,KAAKS,SAAgB,GAInCD,IAAYF,EAAOvB,KAAK,SAAAC,GAAE,OAAIA,IAAOwB,KACvCF,EAAOlB,KAAKoB,IAHTF,EAAO5B,OAAS,GAAG6B,IAM1B,OAAOD,2EAIP,OACExC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2C,SAAA,KACE5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAA,UAAQ6C,QAASC,KAAKhB,qBAAtB,eACAhC,EAAAC,EAAAC,cAAC+C,EAAD,CAASzB,QAASwB,KAAKlB,MAAMC,wBArCnBmB,aC9CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStC,MACvB,2DCZNuC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9076140a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst settings = {\n  price: 1.25,\n  total: 10\n};\n\nconst Header = () => <h4> Generator Lotto </h4>;\nconst Budget = () => (\n  <div>\n    {\" \"}\n    Twój budżet wynosi: {settings.total}\n    złotych{\" \"}\n  </div>\n);\nconst DrawingButton = () => (\n  <button onClick={this.handleDrawingButton}> Losowanie </button>\n);\nconst Zaklad = props => {\n  console.log(props);\n  const liczby = [...props.zaklad];\n  console.log(liczby);\n\n  if (liczby.length) {\n    let arr = [];\n    for (let i = 1; i < 50; i++) {\n      let match = liczby.find(el => el === i);\n      let div =\n        i === match ? (\n          <div key={i} className=\"full_number\">\n            {i}\n          </div>\n        ) : (\n          <div key={i}>{i}</div>\n        );\n      arr.push(div);\n    }\n\n    return <div className=\"pojedynczy_zaklad\">{arr}</div>;\n  } else {\n    return null;\n  }\n};\n\nconst Zaklady = props => {\n  const liczby = [...props.zaklady];\n  console.log(liczby.length);\n  if (liczby.length) {\n    let table = liczby.map(liczba => <Zaklad zaklad={liczba} />);\n    console.log(table);\n    return <div className=\"main_table\">{table}</div>;\n  } else {\n    return null;\n  }\n};\n\nclass App extends Component {\n  state = {\n    tableOfResult: []\n  };\n  handleDrawingButton = () => {\n    let iloscZakladow = Math.floor(settings.total / settings.price);\n    let tableOfResult = [];\n    for (let i = 0; i < iloscZakladow; i++) {\n      let z = this.drawing();\n      tableOfResult.push(z);\n    }\n    this.setState({\n      tableOfResult\n    });\n  };\n\n  drawing = () => {\n    let result = [];\n\n    function wynikLosowania() {\n      return Math.floor(Math.random() * 42 + 1);\n    }\n    while (result.length < 5) {\n      let oneDraw = wynikLosowania();\n      if (oneDraw !== result.find(el => el === oneDraw)) {\n        result.push(oneDraw);\n      }\n    }\n    return result;\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Budget />\n        <button onClick={this.handleDrawingButton}> Losowanie </button>\n        <Zaklady zaklady={this.state.tableOfResult} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}